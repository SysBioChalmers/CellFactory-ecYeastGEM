getwd()
library(ggplot2)
library(tidyverse)
getwd()
if (exists("RStudio.Version")){
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
} else {
setwd(getSrcDirectory()[1])
}
getwd()
ECC_dir <- "../results/ECC/"
all_strain <- list.files(ECC_dir)
all_strain
for (x in all_strain){
print(x)
}
for (x in all_strain){
print(x)
ss0 <- paste(ECC_dir, x, sep = "")
print(ss0)
}
ECC0 <- read.table(ss0)
View(ECC0)
ECC0 <- read.table(ss0, header = TRUE)
View(ECC0)
ECC1 <- filter(ECC0, !(CC_lowGlc==0 & CC_highGlc==0))
View(ECC1)
ECC1 <- filter(ECC0, !(CC_lowGlc==0 | CC_highGlc==0))
View(ECC1)
ECC0 <- read.table(ss0, header = TRUE, stringsAsFactors = FALSE)
# remove the rows with zero ECC in low and high conditions
ECC1 <- filter(ECC0, !(CC_lowGlc==0 || CC_highGlc==0))
ECC0 <- read.table(ss0, header = TRUE, stringsAsFactors = FALSE)
# remove the rows with zero ECC in low and high conditions
ECC1 <- filter(ECC0, !(CC_lowGlc==0 | CC_highGlc==0))
View(ECC1)
all_strain
x <- "serine_ECCs.txt"
ss0 <- paste(ECC_dir, x, sep = "")
print(ss0)
ECC0 <- read.table(ss0, header = TRUE, stringsAsFactors = FALSE)
View(ECC0)
# remove the rows with zero ECC in low and high conditions
ECC1 <- filter(ECC0, !(CC_lowGlc==0 | CC_highGlc==0))
# remove the rows with zero ECC in low and high conditions
ECC1 <- filter(ECC0, CC_lowGlc !=0 | CC_highGlc !=0))
ECC1 <- filter(ECC0, CC_lowGlc !=0 | CC_highGlc !=0)
View(ECC1)
View(ECC0)
print(x)
x <- "serine_ECCs.txt"
ss0 <- paste(ECC_dir, x, sep = "")
print(ss0)
ECC0 <- read.table(ss0, header = TRUE, stringsAsFactors = FALSE)
# remove the rows with zero ECC in low and high conditions
ECC1 <- filter(ECC0, CC_lowGlc !=0 | CC_highGlc !=0)
View(ECC1)
gene0 <- ECC1$genes
All_gene <- vector()
for (x in all_strain){
print(x)
x <- "serine_ECCs.txt"
ss0 <- paste(ECC_dir, x, sep = "")
print(ss0)
ECC0 <- read.table(ss0, header = TRUE, stringsAsFactors = FALSE)
# remove the rows with zero ECC in low and high conditions
ECC1 <- filter(ECC0, CC_lowGlc !=0 | CC_highGlc !=0)
gene0 <- ECC1$genes
All_gene <- c(All_gene, gene0)
}
All_gene_unique <- unique(All_gene)
for (x in all_strain){
print(x)
#x <- "serine_ECCs.txt"
ss0 <- paste(ECC_dir, x, sep = "")
print(ss0)
ECC0 <- read.table(ss0, header = TRUE, stringsAsFactors = FALSE)
# remove the rows with zero ECC in low and high conditions
ECC1 <- filter(ECC0, CC_lowGlc !=0 | CC_highGlc !=0)
gene0 <- ECC1$genes
All_gene <- c(All_gene, gene0)
}
All_gene_unique <- unique(All_gene)
All_gene_unique
# creat a dataframe
ECC_df <- data.frame(gene=All_gene_unique, stringsAsFactors = FALSE)
View(ECC_df)
View(ECC_df)
library(hongR)
for (x in all_strain){
print(x)
#x <- "serine_ECCs.txt"
ss0 <- paste(ECC_dir, x, sep = "")
print(ss0)
ECC0 <- read.table(ss0, header = TRUE, stringsAsFactors = FALSE)
# remove the rows with zero ECC in low and high conditions
ECC1 <- filter(ECC0, CC_lowGlc !=0 | CC_highGlc !=0)
}
x
pp <- str_replace(x, "_ECCs.txt", "")
pp
ECC_df[[pp]] <- getSingleReactionFormula(ECC1$CC_lowGlc, ECC1$genes, ECC_df$gene)
View(ECC_df)
ECC_df[[pp]] <- as.numeric(ECC_df[[pp]])
View(ECC_df)
# creat a dataframe
# low ECC
ECC_low_df <- data.frame(gene=All_gene_unique, stringsAsFactors = FALSE)
for (x in all_strain){
print(x)
#x <- "serine_ECCs.txt"
ss0 <- paste(ECC_dir, x, sep = "")
print(ss0)
ECC0 <- read.table(ss0, header = TRUE, stringsAsFactors = FALSE)
# remove the rows with zero ECC in low and high conditions
ECC1 <- filter(ECC0, CC_lowGlc !=0 | CC_highGlc !=0)
# product name
pp <- str_replace(x, "_ECCs.txt", "")
ECC_low_df[[pp]] <- getSingleReactionFormula(ECC1$CC_lowGlc, ECC1$genes, ECC_low_df$gene)
ECC_low_df[[pp]] <- as.numeric(ECC_low_df[[pp]])
}
View(ECC_low_df)
# High ECC
ECC_high_df <- data.frame(gene=All_gene_unique, stringsAsFactors = FALSE)
for (x in all_strain){
print(x)
#x <- "serine_ECCs.txt"
ss0 <- paste(ECC_dir, x, sep = "")
print(ss0)
ECC0 <- read.table(ss0, header = TRUE, stringsAsFactors = FALSE)
# remove the rows with zero ECC in low and high conditions
ECC1 <- filter(ECC0, CC_lowGlc !=0 | CC_highGlc !=0)
# product name
pp <- str_replace(x, "_ECCs.txt", "")
ECC_high_df[[pp]] <- getSingleReactionFormula(ECC1$CC_lowGlc, ECC1$genes, ECC_high_df$gene)
ECC_high_df[[pp]] <- as.numeric(ECC_high_df[[pp]])
}
View(ECC_high_df)
View(ECC_low_df)
# cluster analysis
ECC_low_df1 <- as.data.frame(t(ECC_low_df), stringsAsFactors = FALSE)
View(ECC_low_df1)
ECC_low_df1[1,]
colnames(ECC_low_df1) <- ECC_low_df1[1,]
ECC_low_df1 <-  ECC_low_df1[-c(1),]
# add product annotation information
product_df <- data.frame(product=rownames(ECC_low_df1), stringsAsFactors = FALSE)
View(product_df)
View(product_df)
library(ggplot2)
library(scales)
library(viridis)
# Setting the working directory to the directory which contains this script
if (exists("RStudio.Version")){
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
} else {
setwd(getSrcDirectory()[1])
}
families <- c('amino acid','alkaloid','organic acid','protein','alcohol','terpene','fatty acid','natural pigment','flavonoid','aromatic','bioamine')
codes    <- c('_AA','_alk','_oAc','_pro','_alc','_ter','_FA','_nPg','_fla','_aro','_bioAm')
#Get pie chart for families of chemicals
filename <- paste('../results/targets_summary.txt',sep='')
targets_summary <- read.csv(filename,sep='\t',stringsAsFactors = FALSE)
View(targets_summary)
families <- c('amino acid','alkaloid','organic acid','protein','alcohol','terpene','fatty acid','natural pigment','flavonoid','aromatic','bioamine')
codes    <- c('_AA','_alk','_oAc','_pro','_alc','_ter','_FA','_nPg','_fla','_aro','_bioAm')
#Get pie chart for families of chemicals
filename <- paste('../results/targets_summary.txt',sep='')
targets_summary <- read.csv(filename,sep='\t',stringsAsFactors = FALSE)
classes <- unique(targets_summary$chemClass)
counts  <- c()
for (i in 1:length(classes))
{
counts <- c(counts,sum(targets_summary$chemClass==classes[i]))
}
df <- data.frame(classes,counts)
df <- df[order(-counts),]
df$classes <- factor(df$classes,levels<-df$classes)
View(df)
View(product_df)
getwd()
chemical_inf <- read.table("../ComplementaryData/chemicals_info.txt")
chemical_inf <- read_csv("../ComplementaryData/chemicals_info.txt")
View(chemical_inf)
chemical_inf <- read_delim("../ComplementaryData/chemicals_info.txt")
chemical_inf <- read_csv2("../ComplementaryData/chemicals_info.txt")
View(chemical_inf)
chemical_inf <- chemicals_info <- read_excel("../ComplementaryData/chemicals_info.xlsx")
library(readxl)
chemical_inf <- read_excel("../ComplementaryData/chemicals_info.xlsx")
View(chemical_inf)
chemical_inf$Name0 <- str_to_lower(chemical_inf$Name)
library(ggplot2)
library(scales)
library(viridis)
# Setting the working directory to the directory which contains this script
if (exists("RStudio.Version")){
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
} else {
setwd(getSrcDirectory()[1])
}
families <- c('amino acid','alkaloid','organic acid','protein','alcohol','terpene','fatty acid','natural pigment','flavonoid','aromatic','bioamine')
codes    <- c('_AA','_alk','_oAc','_pro','_alc','_ter','_FA','_nPg','_fla','_aro','_bioAm')
#Get pie chart for families of chemicals
filename <- paste('../results/targets_summary.txt',sep='')
targets_summary <- read.csv(filename,sep='\t',stringsAsFactors = FALSE)
classes <- unique(targets_summary$chemClass)
counts  <- c()
for (i in 1:length(classes))
{
counts <- c(counts,sum(targets_summary$chemClass==classes[i]))
}
df <- data.frame(classes,counts)
df <- df[order(-counts),]
df$classes <- factor(df$classes,levels<-df$classes)
df$perc <- round(df$counts*100/sum(df$counts),digits=1)
filename    <- paste('../results/targets_summary.txt',sep='')
targetsSummary <- read.csv(filename,sep='\t',stringsAsFactors = FALSE)
for (j in 1:length(families)){
chemClass <- families[j]
famCode   <- codes[j]
targets_summary <- targetsSummary
if (nchar(chemClass)>1){
targets_summary <- targets_summary[targets_summary$chemClass==chemClass,]
}
View(targetsSummary)
SSD()
dddff
sss
)
View(targetsSummary)
View(product_df)
#load enzyme info
filename <- paste('../complementaryData/enzymeTable.txt',sep='')
enzTable <- read.csv(filename,sep = '\t',stringsAsFactors = FALSE)
filename <- paste('../complementaryData/chemicals_info.txt',sep='')
chemicals <- read.csv(filename,sep = '\t',stringsAsFactors = FALSE)
filename <- paste('../complementaryData/chemicals_info.txt',sep='')
chemicals <- read.csv(filename,sep = '\t',stringsAsFactors = FALSE)
# Setting the working directory to the directory which contains this script
if (exists("RStudio.Version")){
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
} else {
setwd(getSrcDirectory()[1])
}
#load chemicals info
filename <- paste('../complementaryData/chemicals_info.txt',sep='')
chemicals <- read.csv(filename,sep = '\t',stringsAsFactors = FALSE)
chemicals_info <- read_excel("../ComplementaryData/chemicals_info.xlsx")
View(chemicals_info)
chemicals_info$Name0 <- str_to_lower(chemicals_info$Name)
View(chemicals_info)
View(product_df)
chemicals_info$Name0 <- str_replace_all(chemicals_info$ecModel, ".mat", "")
View(chemicals_info)
chemicals_info$Name0<- str_replace_all(chemicals_info$Name0, "ec", "")
chemicals_info <- read_excel("../ComplementaryData/chemicals_info.xlsx")
chemicals_info$Name0 <- str_replace_all(chemicals_info$ecModel, ".mat", "")
chemicals_info$Name0<- str_replace_all(chemicals_info$Name0, "^ec", "")
chemicals_info$Name0 <- str_to_lower(chemicals_info$Name0)
product_df$class <- getSingleReactionFormula(chemicals_info$class,chemicals_info$Name0,product_df$product)
View(product_df)
View(ECC_low_df1)
# cluster analysis
ECC_low_df1 <- as.data.frame(t(ECC_low_df), stringsAsFactors = FALSE)
colnames(ECC_low_df1) <- ECC_low_df1[1,]
ECC_low_df1 <-  ECC_low_df1[-c(1),]
View(ECC_low_df1)
library(ggfortify)
autoplot(prcomp(product_df), data = ECC_low_df1, colour = 'class') +
theme(axis.text=element_text(size=20, family="Arial"),
axis.title=element_text(size=20, family="Arial") ) +
ggtitle('') +
theme(panel.background = element_rect(fill = "white", color="black", size = 1)) +
theme(legend.text=element_text(size=15),
legend.title =element_text(size=15))
ECC_low_df1 <- sapply(ECC_low_df1, as.numeric)
View(ECC_low_df1)
# cluster analysis
ECC_low_df1 <- as.data.frame(t(ECC_low_df), stringsAsFactors = FALSE)
colnames(ECC_low_df1) <- ECC_low_df1[1,]
ECC_low_df1 <-  ECC_low_df1[-c(1),]
ECC_low_df1[] <- sapply(ECC_low_df1, as.numeric)
# also need a unique name of product
library(ggfortify)
autoplot(prcomp(product_df), data = ECC_low_df1, colour = 'class') +
theme(axis.text=element_text(size=20, family="Arial"),
axis.title=element_text(size=20, family="Arial") ) +
ggtitle('') +
theme(panel.background = element_rect(fill = "white", color="black", size = 1)) +
theme(legend.text=element_text(size=15),
legend.title =element_text(size=15))
autoplot(prcomp(ECC_low_df1), data = product_df, colour = 'class') +
theme(axis.text=element_text(size=20, family="Arial"),
axis.title=element_text(size=20, family="Arial") ) +
ggtitle('') +
theme(panel.background = element_rect(fill = "white", color="black", size = 1)) +
theme(legend.text=element_text(size=15),
legend.title =element_text(size=15))
autoplot(prcomp(ECC_low_df1), data = product_df, colour = 'class') +
theme(axis.text=element_text(size=20, family="Arial"),
axis.title=element_text(size=20, family="Arial") ) +
ggtitle('') +
theme(panel.background = element_rect(fill = "white", color="black", size = 1)) +
theme(legend.text=element_text(size=15),
legend.title =element_text(size=15))
autoplot(prcomp(ECC_low_df1), data = product_df, colour = 'class') +
theme(axis.text=element_text(size=20, family="Arial"),
axis.title=element_text(size=20, family="Arial") ) +
ggtitle('') +
theme(panel.background = element_rect(fill = "white", color="black", size = 1)) +
theme(legend.text=element_text(size=15),
legend.title =element_text(size=15))
# it is found some products are not grouped
# also need a unique name of product
ECC_low_df2$product <- product_df$product
ECC_low_df2$class <- product_df$class
ECC_low_df2 <- ECC_low_df1
ECC_low_df2$product <- product_df$product
ECC_low_df2$class <- product_df$class
library(ggfortify)
autoplot(prcomp(ECC_low_df1), data = ECC_low_df2, colour = 'class') +
theme(axis.text=element_text(size=20, family="Arial"),
axis.title=element_text(size=20, family="Arial") ) +
ggtitle('') +
theme(panel.background = element_rect(fill = "white", color="black", size = 1)) +
theme(legend.text=element_text(size=15),
legend.title =element_text(size=15))
ECC_low_df1[is.na(ECC_low_df1)] <- 0
ECC_low_df2 <- ECC_low_df1
ECC_low_df2$product <- product_df$product
ECC_low_df2$class <- product_df$class
library(ggfortify)
autoplot(prcomp(ECC_low_df1), data = ECC_low_df2, colour = 'class') +
theme(axis.text=element_text(size=20, family="Arial"),
axis.title=element_text(size=20, family="Arial") ) +
ggtitle('') +
theme(panel.background = element_rect(fill = "white", color="black", size = 1)) +
theme(legend.text=element_text(size=15),
legend.title =element_text(size=15))
View(ECC_low_df1)
